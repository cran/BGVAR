// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_BGVAR_RCPPEXPORTS_H_GEN_
#define RCPP_BGVAR_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace BGVAR {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("BGVAR", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("BGVAR", "_BGVAR_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in BGVAR");
            }
        }
    }

    inline List BVAR_linear(arma::mat Yraw, arma::mat Wraw, arma::mat Exraw, arma::uvec lags, int draws, int burnin, int thin, bool cons, bool trend, bool sv, int prior, Rcpp::List hyperparam, Rcpp::List setting_store) {
        typedef SEXP(*Ptr_BVAR_linear)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_BVAR_linear p_BVAR_linear = NULL;
        if (p_BVAR_linear == NULL) {
            validateSignature("List(*BVAR_linear)(arma::mat,arma::mat,arma::mat,arma::uvec,int,int,int,bool,bool,bool,int,Rcpp::List,Rcpp::List)");
            p_BVAR_linear = (Ptr_BVAR_linear)R_GetCCallable("BGVAR", "_BGVAR_BVAR_linear");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_BVAR_linear(Shield<SEXP>(Rcpp::wrap(Yraw)), Shield<SEXP>(Rcpp::wrap(Wraw)), Shield<SEXP>(Rcpp::wrap(Exraw)), Shield<SEXP>(Rcpp::wrap(lags)), Shield<SEXP>(Rcpp::wrap(draws)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thin)), Shield<SEXP>(Rcpp::wrap(cons)), Shield<SEXP>(Rcpp::wrap(trend)), Shield<SEXP>(Rcpp::wrap(sv)), Shield<SEXP>(Rcpp::wrap(prior)), Shield<SEXP>(Rcpp::wrap(hyperparam)), Shield<SEXP>(Rcpp::wrap(setting_store)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_BGVAR_RCPPEXPORTS_H_GEN_
