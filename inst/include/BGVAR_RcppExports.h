// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_BGVAR_RCPPEXPORTS_H_GEN_
#define RCPP_BGVAR_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace BGVAR {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("BGVAR", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("BGVAR", "_BGVAR_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in BGVAR");
            }
        }
    }

    inline List BVAR_linear(const SEXP Y_in, const SEXP W_in, const SEXP p_in, const SEXP draws_in, const SEXP burnin_in, const SEXP cons_in, const SEXP trend_in, const SEXP sv_in, const SEXP thin_in, const SEXP prior_in, const SEXP hyperparam_in, const SEXP Ex_in) {
        typedef SEXP(*Ptr_BVAR_linear)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_BVAR_linear p_BVAR_linear = NULL;
        if (p_BVAR_linear == NULL) {
            validateSignature("List(*BVAR_linear)(const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP,const SEXP)");
            p_BVAR_linear = (Ptr_BVAR_linear)R_GetCCallable("BGVAR", "_BGVAR_BVAR_linear");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_BVAR_linear(Shield<SEXP>(Rcpp::wrap(Y_in)), Shield<SEXP>(Rcpp::wrap(W_in)), Shield<SEXP>(Rcpp::wrap(p_in)), Shield<SEXP>(Rcpp::wrap(draws_in)), Shield<SEXP>(Rcpp::wrap(burnin_in)), Shield<SEXP>(Rcpp::wrap(cons_in)), Shield<SEXP>(Rcpp::wrap(trend_in)), Shield<SEXP>(Rcpp::wrap(sv_in)), Shield<SEXP>(Rcpp::wrap(thin_in)), Shield<SEXP>(Rcpp::wrap(prior_in)), Shield<SEXP>(Rcpp::wrap(hyperparam_in)), Shield<SEXP>(Rcpp::wrap(Ex_in)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_BGVAR_RCPPEXPORTS_H_GEN_
